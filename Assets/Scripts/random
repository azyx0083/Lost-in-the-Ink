using System.Collections;
using UnityEngine;
using TMPro;
using UnityEngine.InputSystem;

public class Dialogue : MonoBehaviour
{
    public TextMeshProUGUI textComponent;
    public string[] initialLines; // Lines to show before interaction
    public string[] followUpLines; // Lines to show after interaction
    public float textSpeed;
    private int index;
    private bool canProceed;
    private bool isDialogueComplete;
    private bool hasInteracted; // Track if the player has interacted
    private InputActions inputActions;

    void Awake() 
    {
        inputActions = ;
    }

    void Start()
    {
        textComponent.text = string.Empty;
        StartDialogue();

        inputActions.Player.Click.Enable();
        inputActions.Player.Click.performed += Click;
    }

    void Update()
    {
        if (Keyboard.current.tKey.wasPressedThisFrame && isDialogueComplete && canProceed)
        {
            ShowNextLines();
        }
    }

    void Click(InputAction.CallbackContext context)
    {
        if (textComponent.text == GetCurrentDialogue()[index])
        {
            NextLine();
        }
        else
        {
            StopAllCoroutines();
            textComponent.text = GetCurrentDialogue()[index];
        }
    }

    void StartDialogue()
    {
        index = 0;
        canProceed = false;
        isDialogueComplete = false;
        hasInteracted = false; // Reset interaction flag
        StartCoroutine(TypeLine());
    }

    IEnumerator TypeLine()
    {
        foreach (char c in GetCurrentDialogue()[index].ToCharArray())
        {
            textComponent.text += c;
            yield return new WaitForSeconds(textSpeed);
        }
        isDialogueComplete = true; // Mark dialogue as complete
        canProceed = true; // Allow interaction
    }

    void NextLine()
    {
        if (index < GetCurrentDialogue().Length - 1)
        {
            index++;
            textComponent.text = string.Empty;
            StartCoroutine(TypeLine());
        }
        else
        {
            if (!hasInteracted)
            {
                // If not interacted yet, disable the dialogue to indicate end
                gameObject.SetActive(false);
            }
            else
            {
                // End dialogue after follow-up lines
                gameObject.SetActive(false);
            }
        }
    }

    void ShowNextLines()
    {
        if (!hasInteracted)
        {
            // Switch to follow-up lines after interaction
            hasInteracted = true;
            index = 0; // Reset index for follow-up lines
            textComponent.text = string.Empty; // Clear previous text
            StartCoroutine(TypeLine());
        }
        else
        {
            NextLine(); // Continue with follow-up lines
        }
    }

    private string[] GetCurrentDialogue()
    {
        return hasInteracted ? followUpLines : initialLines; // Return current dialogue based on interaction status
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            canProceed = true;
        }
    }

    private void OnTriggerExit(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            canProceed = false; 
        }
    }

    private void OnDisable()
    {
        inputActions.Player.Click.performed -= Click;
        inputActions.Player.Click.Disable();
    }
}
